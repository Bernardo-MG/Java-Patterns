/**
 * The MIT License (MIT)
 * <p>
 * Copyright (c) 2014 the original author or authors.
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.wandrell.pattern.command;

/**
 * Interface for the command executor pattern. It is prepared to work with the
 * two command pattern interfaces existing on this same package: {@link Command}
 * and {@link ReturnCommand}.
 * <p>
 * The executor's job is receiving one of these commands and processing it by
 * calling the command's {@code execute()} method, with the only difference
 * between both being that one returns a value when executed, while the other
 * doesn't.
 * <p>
 * Due to this, there are two different {@code execute} methods on this class.
 * One for {@code Command} instances, {@link #execute(Command) execute(Command)}
 * , which is {@code void}, and one for {@code ReturnCommand} instances,
 * {@link #execute(ReturnCommand) execute(ReturnCommand)}, which returns the
 * value generated by the received command.
 * <p>
 * Both methods are expected to execute the command as soon as they receive it.
 * There can be additional operations, such as catching exceptions, injecting
 * dependencies or setting up the environment. But these should be minimal, and
 * never postpone the command's execution more than necessary.
 * 
 * @author Bernardo Mart√≠nez Garrido
 * @version 0.1.0
 * @see Command
 * @see ReturnCommand
 */
public interface CommandExecutor {

    /**
     * Executes the received {@code Command}.
     * <p>
     * Any exception thrown by the command is expected to be caught and handled
     * inside this method.
     * 
     * @param command
     *            the command to be executed
     */
    public void execute(final Command command);

    /**
     * Executes the received {@code ReturnCommand} and returns the value
     * generated by this operation.
     * <p>
     * Any exception thrown by the command is expected to be caught and handled
     * inside this method.
     * 
     * @param command
     *            the command to be executed
     * @param <V>
     *            the type to be returned
     * @return the command's return value
     */
    public <V> V execute(final ReturnCommand<V> command);

}
