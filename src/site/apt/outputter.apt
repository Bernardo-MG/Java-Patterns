Outputter

	An outputter sends data through an output I/O operation, hiding the actual
	implementation or API being used.
	
* Interface

[./images/outputter_class.png] Outputter interface

	The {{{./apidocs/com/wandrell/pattern/outputter/Outputter.html}Outputter}}
	consists of just two methods, both called <output>, which send an object
	through the accompanying output object, which may be a <Writer> or an
	<OutputStream>.
	
	Note that the output object is expected to be closed once the operation is
	finished.

* Implementations

[./images/outputter_class_tree.png] Outputter class hierarchy tree

===

** XML

	The {{{./apidocs/com/wandrell/pattern/outputter/xml/XMLOutputter.html}XMLOutputter}}
	allows storing data into XML files. It requires a JDOM 2 Document.
	
	It is possible to add a validation file to the resulting XML file. Both DTD
	and XSD files are valid.
	
	For example, generating an XML file with XSD validation just requires the
	following lines:

+---------------------
public final void writeValidation(final Document doc, final Writer writer) {
	final Outputter<Document> outputter;
	
	outputter = new XMLOutputter(XMLValidationType.XSD, "/validation.xsd");
	
	outputter.output(doc, writer);
}
+---------------------

** YAML

	The {{{./apidocs/com/wandrell/pattern/outputter/yaml/YAMLOutputter.html}YAMLOutputter}}
	allows storing data into YAML files. It requires an object, which will be
	processed into the file.
	
	The easiest way to use this class is by giving it a <Map>, as it adapts
	best to the structure of a YAML file.
	
+---------------------
public final void writeYAML(final Writer writer) {
	final Map<String, Object> data;
	final Outputter<Object> outputter;
	
	outputter = new YAMLOutputter();
	
	data = new LinkedHashMap<String, Object>();
	data.put("key1", "value1");
	data.put("key2", 2);
	data.put("key3", true);
	
	outputter.output(data, writer);
}
+---------------------